;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings for tabs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Spaces instead of tabs
(setq-default indent-tabs-mode nil)

; If there is a tab, make it the size of 4 spaces
(setq-default tab-width 4)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ; smart tab
;; ; this works but is not hippie/yas compatible
;; (global-set-key [(tab)] 'smart-tab)
;; (defun smart-tab ()
;;   "This smart tab is minibuffer compliant: it acts as usual in
;;     the minibuffer. Else, if mark is active, indents region. Else if
;;     point is at the end of a symbol, expands it. Else indents the
;;     current line."
;;   (interactive)
;;   (if (minibufferp)
;;       (unless (minibuffer-complete)
;;         (dabbrev-expand nil))
;;     (if mark-active
;;         (indent-region (region-beginning)
;;                        (region-end))
;;       (if (looking-at "\\_>")
;;           (dabbrev-expand nil)
;;           (indent-for-tab-command)))))
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; (setq tab-always-indent 'complete)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(feature smart-tab
         (require 'hippie-exp)

         (setq hippie-expand-try-functions-list
               '(yas/hippie-try-expand
                 try-expand-dabbrev
                 try-expand-dabbrev-all-buffers
                 try-expand-dabbrev-from-kill
                 try-complete-file-name
                 try-complete-lisp-symbol))

         (defun dbl:smart-tab ()
           "If mark is active, indents region. Else if point is at the end of a symbol,
           expands it. Else indents the current line. Acts as normal in minibuffer."
           (interactive)
           (if (boundp 'ido-cur-item)
               (ido-complete)
             (if (minibufferp)
                 (minibuffer-complete)
               (if mark-active
                   (indent-region (region-beginning) (region-end))
                 (if (and (looking-at "\\_>") (not (looking-at "end")))
                     (hippie-expand nil)
                   (indent-for-tab-command))))))

         (global-set-key [(tab)] 'dbl:smart-tab)
         (add-hook 'term-mode-hook '(lambda ()
                                      (local-set-key [(tab)] 'term-send-raw))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Hippie expand.  Groovy vans with tie-dyes.

;; (setq hippie-expand-try-functions-list
;;       '(yas/hippie-try-expand
;;         try-expand-dabbrev
;;         try-expand-dabbrev-all-buffers
;;         try-expand-dabbrev-from-kill
;;         try-complete-file-name
;;         try-complete-lisp-symbol))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Smart Tab
;; ;; Borrowed from snippets at
;; ;; http://www.emacswiki.org/emacs/TabCompletion
;; ;; TODO: Take a look at https://github.com/genehack/smart-tab

;; (defvar smart-tab-using-hippie-expand t
;;   "turn this on if you want to use hippie-expand completion.")

;; (defun smart-tab (prefix)
;;   "Needs `transient-mark-mode' to be on. This smart tab is
;;   minibuffer compliant: it acts as usual in the minibuffer.

;;   In all other buffers: if PREFIX is \\[universal-argument], calls
;;   `smart-indent'. Else if point is at the end of a symbol,
;;   expands it. Else calls `smart-indent'."
;;   (interactive "P")
;;   (labels ((smart-tab-must-expand (&optional prefix)
;;                                   (unless (or (consp prefix)
;;                                               mark-active)
;;                                     (looking-at "\\_>"))))
;;     (cond ((minibufferp)
;;            (minibuffer-complete))
;;           ((smart-tab-must-expand prefix)
;;            (if smart-tab-using-hippie-expand
;;                (hippie-expand prefix)
;;              (dabbrev-expand prefix)))
;;           ((smart-indent)))))

;; (defun smart-indent ()
;;   "Indents region if mark is active, or current line otherwise."
;;   (interactive)
;;   (if mark-active
;;     (indent-region (region-beginning)
;;                    (region-end))
;;     (indent-for-tab-command)))
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "TAB") 'smart-tab)



;; ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; ;; one try at completition - good except it doesn't work w yas
;; ;; (add-to-list 'load-path "~/.emacs.d/plugins/misc")

;; ;; (require 'smart-tab)
;; ;; (global-smart-tab-mode 1)


